# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."langbot" = {
    image = "rockchin/langbot:latest";
    volumes = [
      "/home/ming/langbot/data:/app/data:rw"
      "/home/ming/langbot/plugins:/app/plugins:rw"
    ];
    ports = [
      "5300:5300/tcp"
      "2280:2280/tcp"
      "2281:2281/tcp"
      "2282:2282/tcp"
      "2283:2283/tcp"
      "2284:2284/tcp"
      "2285:2285/tcp"
      "2286:2286/tcp"
      "2287:2287/tcp"
      "2288:2288/tcp"
      "2289:2289/tcp"
      "2290:2290/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=langbot"
      "--network=langbot_default"
    ];
  };
  systemd.services."docker-langbot" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "on-failure";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-langbot_default.service"
    ];
    requires = [
      "docker-network-langbot_default.service"
    ];
    partOf = [
      "docker-compose-langbot-root.target"
    ];
    wantedBy = [
      "docker-compose-langbot-root.target"
    ];
  };
  virtualisation.oci-containers.containers."napcat" = {
    image = "mlikiowa/napcat-docker:latest";
    environment = {
      "NAPCAT_GID" = "100";
      "NAPCAT_UID" = "1000";
    };
    volumes = [
      "/home/ming/langbot/QQ:/app/.config/QQ:rw"
      "/home/ming/langbot/config:/app/napcat/config:rw"
    ];
    ports = [
      "3000:3000/tcp"
      "3001:3001/tcp"
      "6099:6099/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=napcat"
      "--network=langbot_default"
    ];
  };
  systemd.services."docker-napcat" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-langbot_default.service"
    ];
    requires = [
      "docker-network-langbot_default.service"
    ];
    partOf = [
      "docker-compose-langbot-root.target"
    ];
    wantedBy = [
      "docker-compose-langbot-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-langbot_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f langbot_default";
    };
    script = ''
      docker network inspect langbot_default || docker network create langbot_default
    '';
    partOf = [ "docker-compose-langbot-root.target" ];
    wantedBy = [ "docker-compose-langbot-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-langbot-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
