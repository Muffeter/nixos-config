# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."teamspeak-db" = {
    image = "mariadb";
    environment = {
      "MYSQL_DATABASE" = "teamspeak";
      "MYSQL_ROOT_PASSWORD" = "gui159";
    };
    log-driver = "journald";
    extraOptions = [
      "--network-alias=db"
      "--network=teamspeak_default"
    ];
  };
  systemd.services."docker-teamspeak-db" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "1000ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-teamspeak_default.service"
    ];
    requires = [
      "docker-network-teamspeak_default.service"
    ];
    partOf = [
      "docker-compose-teamspeak-root.target"
    ];
    wantedBy = [
      "docker-compose-teamspeak-root.target"
    ];
  };
  virtualisation.oci-containers.containers."teamspeak-teamspeak" = {
    image = "teamspeak";
    environment = {
      "TS3SERVER_DB_HOST" = "db";
      "TS3SERVER_DB_NAME" = "teamspeak";
      "TS3SERVER_DB_PASSWORD" = "gui159";
      "TS3SERVER_DB_PLUGIN" = "ts3db_mariadb";
      "TS3SERVER_DB_SQLCREATEPATH" = "create_mariadb";
      "TS3SERVER_DB_USER" = "root";
      "TS3SERVER_DB_WAITUNTILREADY" = "30";
      "TS3SERVER_LICENSE" = "accept";
    };
    ports = [
      "9987:9987/udp"
      "10011:10011/tcp"
      "30033:30033/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=teamspeak"
      "--network=teamspeak_default"
    ];
  };
  systemd.services."docker-teamspeak-teamspeak" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "1000ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-teamspeak_default.service"
    ];
    requires = [
      "docker-network-teamspeak_default.service"
    ];
    partOf = [
      "docker-compose-teamspeak-root.target"
    ];
    wantedBy = [
      "docker-compose-teamspeak-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-teamspeak_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f teamspeak_default";
    };
    script = ''
      docker network inspect teamspeak_default || docker network create teamspeak_default
    '';
    partOf = [ "docker-compose-teamspeak-root.target" ];
    wantedBy = [ "docker-compose-teamspeak-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-teamspeak-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
